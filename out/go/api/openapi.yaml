openapi: 3.0.2
info:
  description: This is a sample code.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Open API Sample
  version: "1.0"
servers:
- url: https://pet.example.com/v1
paths:
  /test:
    get:
      responses:
        "200":
          description: OK
  /pets:
    get:
      parameters:
      - description: tags to filter by
        explode: true
        in: query
        name: tags
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Pet'
                type: array
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Failed
    post:
      description: Creates a new pet.
      operationId: addPet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
        description: request body for adding a new pet.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Failed
  /pets/{id}:
    delete:
      parameters:
      - description: ID for deleting pet.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "204":
          description: pet deleted
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Failed
    get:
      parameters:
      - description: ID for fetching pet.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Failed
components:
  schemas:
    Pet:
      allOf:
      - $ref: '#/components/schemas/NewPet'
      - $ref: '#/components/schemas/Pet_allOf'
    NewPet:
      example:
        name: name
        tag: tag
      properties:
        name:
          type: string
        tag:
          type: string
      required:
      - name
      type: object
    Error:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
      required:
      - code
      - message
      type: object
    Pet_allOf:
      properties:
        id:
          format: int64
          type: integer
      required:
      - id
      type: object
